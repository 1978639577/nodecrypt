import {
  __commonJS
} from "./chunk-HKJ2B2AA.js";

// node_modules/js-chacha20/src/jschacha20.js
var require_jschacha20 = __commonJS({
  "node_modules/js-chacha20/src/jschacha20.js"(exports, module) {
    var JSChaCha20 = function(key, nonce, counter) {
      if (typeof counter === "undefined") {
        counter = 0;
      }
      if (!(key instanceof Uint8Array) || key.length !== 32) {
        throw new Error("Key should be 32 byte array!");
      }
      if (!(nonce instanceof Uint8Array) || nonce.length !== 12) {
        throw new Error("Nonce should be 12 byte array!");
      }
      this._rounds = 20;
      this._sigma = [1634760805, 857760878, 2036477234, 1797285236];
      this._param = [
        this._sigma[0],
        this._sigma[1],
        this._sigma[2],
        this._sigma[3],
        // key
        this._get32(key, 0),
        this._get32(key, 4),
        this._get32(key, 8),
        this._get32(key, 12),
        this._get32(key, 16),
        this._get32(key, 20),
        this._get32(key, 24),
        this._get32(key, 28),
        // counter
        counter,
        // nonce
        this._get32(nonce, 0),
        this._get32(nonce, 4),
        this._get32(nonce, 8)
      ];
      this._keystream = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ];
      this._byteCounter = 0;
    };
    JSChaCha20.prototype._chacha = function() {
      var mix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var i = 0;
      var b = 0;
      for (i = 0; i < 16; i++) {
        mix[i] = this._param[i];
      }
      for (i = 0; i < this._rounds; i += 2) {
        this._quarterround(mix, 0, 4, 8, 12);
        this._quarterround(mix, 1, 5, 9, 13);
        this._quarterround(mix, 2, 6, 10, 14);
        this._quarterround(mix, 3, 7, 11, 15);
        this._quarterround(mix, 0, 5, 10, 15);
        this._quarterround(mix, 1, 6, 11, 12);
        this._quarterround(mix, 2, 7, 8, 13);
        this._quarterround(mix, 3, 4, 9, 14);
      }
      for (i = 0; i < 16; i++) {
        mix[i] += this._param[i];
        this._keystream[b++] = mix[i] & 255;
        this._keystream[b++] = mix[i] >>> 8 & 255;
        this._keystream[b++] = mix[i] >>> 16 & 255;
        this._keystream[b++] = mix[i] >>> 24 & 255;
      }
    };
    JSChaCha20.prototype._quarterround = function(output, a, b, c, d) {
      output[d] = this._rotl(output[d] ^ (output[a] += output[b]), 16);
      output[b] = this._rotl(output[b] ^ (output[c] += output[d]), 12);
      output[d] = this._rotl(output[d] ^ (output[a] += output[b]), 8);
      output[b] = this._rotl(output[b] ^ (output[c] += output[d]), 7);
      output[a] >>>= 0;
      output[b] >>>= 0;
      output[c] >>>= 0;
      output[d] >>>= 0;
    };
    JSChaCha20.prototype._get32 = function(data, index) {
      return data[index++] ^ data[index++] << 8 ^ data[index++] << 16 ^ data[index] << 24;
    };
    JSChaCha20.prototype._rotl = function(data, shift) {
      return data << shift | data >>> 32 - shift;
    };
    JSChaCha20.prototype.encrypt = function(data) {
      return this._update(data);
    };
    JSChaCha20.prototype.decrypt = function(data) {
      return this._update(data);
    };
    JSChaCha20.prototype._update = function(data) {
      if (!(data instanceof Uint8Array) || data.length === 0) {
        throw new Error("Data should be type of bytes (Uint8Array) and not empty!");
      }
      var output = new Uint8Array(data.length);
      for (var i = 0; i < data.length; i++) {
        if (this._byteCounter === 0 || this._byteCounter === 64) {
          this._chacha();
          this._param[12]++;
          this._byteCounter = 0;
        }
        output[i] = data[i] ^ this._keystream[this._byteCounter++];
      }
      return output;
    };
    if (typeof module !== "undefined" && module.exports) {
      module.exports = JSChaCha20;
    }
  }
});
export default require_jschacha20();
//# sourceMappingURL=js-chacha20.js.map
